version: 2.1

parameters:
  LIVEBRANCHES:
    type: string
    default: "false"
  BRANCHNAME:
    type: string
    default: ""
  calypsoProject:
    type: string
    default: ""
  jetpackProject:
    type: string
    default: ""
  E2E_BRANCH:
    type: string
    default: "trunk"
  pullRequestNum:
    type: string
    default: ""
  prContext:
    type: string
    default: ""
  RUN_ARGS:
    type: string
    default: ""
  calypsoSha:
    type: string
    default: ""
  testFlag:
    type: string
    default: ""
  sha:
    type: string
    default: ""
  DEPLOY_USER:
    type: string
    default: ""
  PROD_REVISION:
    type: string
    default: ""
  TO_DEPLOY_REVISION:
    type: string
    default: ""
  RUN_SPECIFIED:
    type: string
    default: ""
  JETPACKHOST:
    type: string
    default: ""
  SKIP_DOMAIN_TESTS:
    type: boolean
    default: false
  HORIZON_TESTS:
    type: boolean
    default: false
  FORCE_ALL:
    type: boolean
    default: false
  GUTENBERG_EDGE:
    type: boolean
    default: false
  COBLOCKS_EDGE:
    type: boolean
    default: false

references:
  set-e2e-variables: &set-e2e-variables
    name: Set e2e environment variables
    command: |
      echo 'export LIVEBRANCHES=<< pipeline.parameters.LIVEBRANCHES >>' >> $BASH_ENV &&
      echo 'export BRANCHNAME=<< pipeline.parameters.BRANCHNAME >>' >> $BASH_ENV &&
      echo 'export calypsoProject=<< pipeline.parameters.calypsoProject >>' >> $BASH_ENV &&
      echo 'export jetpackProject=<< pipeline.parameters.jetpackProject >>' >> $BASH_ENV &&
      echo 'export E2E_BRANCH=<< pipeline.parameters.E2E_BRANCH >>' >> $BASH_ENV &&
      echo 'export pullRequestNum=<< pipeline.parameters.pullRequestNum >>' >> $BASH_ENV &&
      echo 'export prContext=<< pipeline.parameters.prContext >>' >> $BASH_ENV &&
      echo 'export RUN_ARGS="<< pipeline.parameters.RUN_ARGS >>"' >> $BASH_ENV &&
      echo 'export calypsoSha=<< pipeline.parameters.calypsoSha >>' >> $BASH_ENV &&
      echo 'export testFlag="<< pipeline.parameters.testFlag >>"' >> $BASH_ENV &&
      echo 'export sha=<< pipeline.parameters.sha >>' >> $BASH_ENV &&
      echo 'export DEPLOY_USER=<< pipeline.parameters.DEPLOY_USER >>' >> $BASH_ENV &&
      echo 'export PROD_REVISION=<< pipeline.parameters.PROD_REVISION >>' >> $BASH_ENV &&
      echo 'export TO_DEPLOY_REVISION=<< pipeline.parameters.TO_DEPLOY_REVISION >>' >> $BASH_ENV &&
      echo 'export RUN_SPECIFIED=<< pipeline.parameters.RUN_SPECIFIED >>' >> $BASH_ENV &&
      echo 'export JETPACKHOST=<< pipeline.parameters.JETPACKHOST >>' >> $BASH_ENV &&
      if [ << pipeline.parameters.SKIP_DOMAIN_TESTS >> = true ]; then echo 'export SKIP_DOMAIN_TESTS=true' >> $BASH_ENV; fi &&
      echo 'export HORIZON_TESTS=<< pipeline.parameters.HORIZON_TESTS >>' >> $BASH_ENV &&
      echo 'export FORCE_ALL=<< pipeline.parameters.FORCE_ALL >>' >> $BASH_ENV &&
      echo 'export GUTENBERG_EDGE=<< pipeline.parameters.GUTENBERG_EDGE >>' >> $BASH_ENV
      echo 'export COBLOCKS_EDGE=<< pipeline.parameters.COBLOCKS_EDGE >>' >> $BASH_ENV

  install-specific-chrome-browser: &install-specific-chrome-browser
    name: Install Chrome
    command: |
      sudo apt-get update
      cd /tmp
      wget --no-check-certificate https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}_amd64.deb
      sudo dpkg -i google-chrome-stable_${CHROME_VERSION}_amd64.deb || sudo apt-get -y -f install
      rm google-chrome-stable_${CHROME_VERSION}_amd64.deb;
      sudo sed -i 's|HERE/chrome"|HERE/chrome" --disable-setuid-sandbox --no-sandbox|g' "/opt/google/chrome/google-chrome"
      CHROME_VERSION="$(google-chrome --version)"
      CHROMEDRIVER_RELEASE="$(echo $CHROME_VERSION | sed 's/^Google Chrome //')"
      CHROMEDRIVER_RELEASE=${CHROMEDRIVER_RELEASE%%.*}
      CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 4 --retry-delay 5 http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROMEDRIVER_RELEASE})
      curl --silent --show-error --location --fail --retry 4 --retry-delay 5 --output /tmp/chromedriver_linux64.zip "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
      cd /tmp && unzip chromedriver_linux64.zip && rm -rf chromedriver_linux64.zip && sudo mv chromedriver /usr/local/bin/chromedriver && sudo chmod +x /usr/local/bin/chromedriver
      google-chrome --version
      chromedriver --version

jobs:
  run-tests:
    working_directory: ~/wp-calypso
    environment:
      DETECT_CHROMEDRIVER_VERSION: "false"
      CHROMEDRIVER_FILEPATH: /usr/local/bin/chromedriver
      CHROME_VERSION: "84.0.4147.135-1"
    docker:
      - image: "cimg/node:$NODE_VERSION"
        environment:
          NODE_ENV: test
          TARGET: BRANCHES
    parallelism: 3
    steps:
      - checkout
      - run: *set-e2e-variables
      - run: git submodule init
      - run: git submodule update --remote --force
      - run: *install-specific-chrome-browser
      - run: cd wp-calypso && git checkout origin/${E2E_BRANCH-trunk}
      - run: sudo apt-get install -y xvfb
      - restore_cache:
          keys:
            - v1-packages-{{ checksum "wp-calypso/.nvmrc" }}-{{ checksum "wp-calypso/yarn.lock" }}-{{ checksum "wp-calypso/test/e2e/package.json" }}
            - v1-packages-{{ checksum "wp-calypso/.nvmrc" }}-{{ checksum "wp-calypso/yarn.lock" }}
            - v1-packages-{{ checksum "wp-calypso/.nvmrc" }}
            - v1-packages
      - run: |
          cd wp-calypso/test/e2e && yarn --frozen-lockfile
      - save_cache:
          key: v1-packages-{{ checksum "wp-calypso/.nvmrc" }}-{{ checksum "wp-calypso/yarn.lock" }}-{{ checksum "wp-calypso/test/e2e/package.json" }}
          paths:
            - "~/.cache/yarn"
      - run: |
          google-chrome --version > wp-calypso/test/e2e/.chromedriver_version
          echo -n "Google Chrome version: " && cat wp-calypso/test/e2e/.chromedriver_version
      - run: cd wp-calypso/test/e2e && yarn run decryptconfig
      - run: sudo chmod +x wp-calypso/test/e2e/node_modules/.bin/magellan
      - run:
          name: Check whether to run all signup tests
          command: |
            cd wp-calypso
            if [[ -n $(git diff --exit-code .. origin/trunk -- client/signup) || -n $(git diff --exit-code .. origin/trunk -- client/blocks/signup-form) || -n $(git diff --exit-code .. origin/trunk -- client/lib/signup) ]] || ! ${LIVEBRANCHES} || ${FORCE_ALL}; then
                echo "Running All Signup Tests"
            else
                echo "Running Subset of Signup Tests"
                echo "export SUITE_TAG=\"parallel\"" >> $BASH_ENV
            fi
      - run: |
          cd wp-calypso/test/e2e
          echo "export TESTFILES=\"$(circleci tests glob "specs*/**/*spec.js" | circleci tests split --split-by=timings| tr '\n' ',' )\"" >> $BASH_ENV
      - run: echo running test command "./run.sh -p -R ${testFlag} -f ${TESTFILES} $RUN_ARGS"
      - run:
          name: Run Tests
          command: cd wp-calypso/test/e2e && ./run.sh -R ${testFlag} -f ${TESTFILES} $RUN_ARGS
      - run:
          name: Report Status
          when: always
          command: if [ "$CIRCLE_NODE_INDEX" = 0 ]; then ./check_nodes_for_status.sh; fi
      - store_test_results:
          path: wp-calypso/test/e2e/reports/
      - store_artifacts:
          path: wp-calypso/test/e2e/reports/
      - store_artifacts:
          path: wp-calypso/test/e2e/screenshots/

  wait-calypso-live:
    working_directory: ~/wp-calypso
    docker:
      - image: "cimg/node:$NODE_VERSION"
    steps:
      - checkout
      - run: *set-e2e-variables
      - run: git submodule init
      - run: git submodule update --remote --force
      - run: if [ "$LIVEBRANCHES" = true ]; then ./wp-calypso/test/e2e/scripts/wait-for-running-branch.sh; fi
      - run:
          when: on_fail
          command: |
            ./wp-calypso/test/e2e/scripts/notify-webhook.sh failed

workflows:
  version: 2
  build:
    jobs:
      - wait-calypso-live
      - run-tests:
          requires:
            - wait-calypso-live
